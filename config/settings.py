"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*6k94ipguxs9leo_opk^&!9&k1)jy)2mi)0p8nb-2@-@r-*_!#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps added for API functionality
    'rest_framework',                      # Django REST framework (DRF) - builds the API
    'rest_framework_simplejwt',            # SimpleJWT - JWT auth backend for DRF
    'corsheaders',                         # django-cors-headers - handle Cross-Origin Resource Sharing
    'drf_spectacular',                     # drf-spectacular - OpenAPI schema generation

    # Local apps
    'portfolio_api',                       # The portfolio app containing our API endpoints/models
]


MIDDLEWARE = [
    # CorsMiddleware should be as high as possible in the middleware stack so
    # it can add CORS headers before other middleware (like SecurityMiddleware)
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Time zone settings
# Use America/Chicago as the project time zone and enable timezone-aware datetimes.
# This is important for consistent timestamp handling in logs, databases, and APIs.
TIME_ZONE = 'America/Chicago'

USE_I18N = True

# Keep timezone support enabled so Django stores datetimes in UTC internally and
# presents them in the configured TIME_ZONE where appropriate.
USE_TZ = True


# -----------------------------------------------------------------------------
# Django REST framework configuration
# - Explainable defaults for authentication and schema generation used in interviews
# -----------------------------------------------------------------------------
REST_FRAMEWORK = {
    # Use JWT authentication (via SimpleJWT) as the default for API endpoints.
    # This keeps session cookies out of the equation and is the common pattern
    # for single-page apps and mobile clients.
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # Use drf-spectacular to generate an OpenAPI schema automatically. This
    # enables browsable API docs and tools like Swagger/Redoc in production.
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


# -----------------------------------------------------------------------------
# CORS configuration
# - Allow the local frontend dev servers to access this API during development
# -----------------------------------------------------------------------------
# For interview/demo setups we usually allow localhost:3000 where a React/Vite
# frontend runs. In production you should restrict or compute this dynamically.
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]


# -----------------------------------------------------------------------------
# drf-spectacular (OpenAPI) settings
# - Provides metadata for generated OpenAPI schema (useful to show during interviews)
# -----------------------------------------------------------------------------
SPECTACULAR_SETTINGS = {
    'TITLE': 'Branden Portfolio API',
    'VERSION': '1.0.0',
    # You can add DESCRIPTION, CONTACT, LICENSE, and other metadata here as needed.
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
